// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Valve.VR
{
    using System;
    using UnityEngine;
    
    
    public partial class SteamVR_Actions
    {
        
        private static SteamVR_Action_Boolean p_default_moveDown;
        
        private static SteamVR_Action_Boolean p_default_moveForward;
        
        private static SteamVR_Action_Boolean p_default_moveBackward;
        
        private static SteamVR_Action_Boolean p_default_moveRight;
        
        private static SteamVR_Action_Boolean p_default_moveLeft;
        
        private static SteamVR_Action_Boolean p_default_rotateX;
        
        private static SteamVR_Action_Boolean p_default_rotateY;
        
        private static SteamVR_Action_Boolean p_default_rotateZ;
        
        private static SteamVR_Action_Pose p_default_skellyLeft;
        
        private static SteamVR_Action_Pose p_default_skellyRight;
        
        private static SteamVR_Action_Boolean p_default_rotateXNeg;
        
        private static SteamVR_Action_Boolean p_default_rotateYNeg;
        
        private static SteamVR_Action_Boolean p_default_rotateZNeg;
        
        private static SteamVR_Action_Vector2 p_default_trackpadLeftPosition;
        
        private static SteamVR_Action_Vector2 p_default_trackpadRightPosition;
        
        private static SteamVR_Action_Boolean p_default_holdPiece;
        
        private static SteamVR_Action_Boolean p_default_moveLeftJoy;
        
        private static SteamVR_Action_Boolean p_default_moveForwardJoy;
        
        private static SteamVR_Action_Boolean p_default_moveRightJoy;
        
        private static SteamVR_Action_Boolean p_default_moveBackwardJoy;
        
        private static SteamVR_Action_Boolean p_default_rotateXJoy;
        
        private static SteamVR_Action_Boolean p_default_rotateZJoy;
        
        private static SteamVR_Action_Boolean p_default_rotateZNegJoy;
        
        private static SteamVR_Action_Boolean p_default_rotateXNegJoy;
        
        private static SteamVR_Action_Vector2 p_default_rightJoyPosition;
        
        private static SteamVR_Action_Vector2 p_default_leftJoyPosition;
        
        private static SteamVR_Action_Vibration p_default_Haptic;
        
        private static SteamVR_Action_Vector2 p_platformer_Move;
        
        private static SteamVR_Action_Boolean p_platformer_Jump;
        
        private static SteamVR_Action_Vector2 p_buggy_Steering;
        
        private static SteamVR_Action_Single p_buggy_Throttle;
        
        private static SteamVR_Action_Boolean p_buggy_Brake;
        
        private static SteamVR_Action_Boolean p_buggy_Reset;
        
        private static SteamVR_Action_Pose p_mixedreality_ExternalCamera;
        
        public static SteamVR_Action_Boolean default_moveDown
        {
            get
            {
                return SteamVR_Actions.p_default_moveDown.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_moveForward
        {
            get
            {
                return SteamVR_Actions.p_default_moveForward.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_moveBackward
        {
            get
            {
                return SteamVR_Actions.p_default_moveBackward.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_moveRight
        {
            get
            {
                return SteamVR_Actions.p_default_moveRight.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_moveLeft
        {
            get
            {
                return SteamVR_Actions.p_default_moveLeft.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_rotateX
        {
            get
            {
                return SteamVR_Actions.p_default_rotateX.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_rotateY
        {
            get
            {
                return SteamVR_Actions.p_default_rotateY.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_rotateZ
        {
            get
            {
                return SteamVR_Actions.p_default_rotateZ.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose default_skellyLeft
        {
            get
            {
                return SteamVR_Actions.p_default_skellyLeft.GetCopy <SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Pose default_skellyRight
        {
            get
            {
                return SteamVR_Actions.p_default_skellyRight.GetCopy <SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Boolean default_rotateXNeg
        {
            get
            {
                return SteamVR_Actions.p_default_rotateXNeg.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_rotateYNeg
        {
            get
            {
                return SteamVR_Actions.p_default_rotateYNeg.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_rotateZNeg
        {
            get
            {
                return SteamVR_Actions.p_default_rotateZNeg.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 default_trackpadLeftPosition
        {
            get
            {
                return SteamVR_Actions.p_default_trackpadLeftPosition.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Vector2 default_trackpadRightPosition
        {
            get
            {
                return SteamVR_Actions.p_default_trackpadRightPosition.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean default_holdPiece
        {
            get
            {
                return SteamVR_Actions.p_default_holdPiece.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_moveLeftJoy
        {
            get
            {
                return SteamVR_Actions.p_default_moveLeftJoy.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_moveForwardJoy
        {
            get
            {
                return SteamVR_Actions.p_default_moveForwardJoy.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_moveRightJoy
        {
            get
            {
                return SteamVR_Actions.p_default_moveRightJoy.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_moveBackwardJoy
        {
            get
            {
                return SteamVR_Actions.p_default_moveBackwardJoy.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_rotateXJoy
        {
            get
            {
                return SteamVR_Actions.p_default_rotateXJoy.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_rotateZJoy
        {
            get
            {
                return SteamVR_Actions.p_default_rotateZJoy.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_rotateZNegJoy
        {
            get
            {
                return SteamVR_Actions.p_default_rotateZNegJoy.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_rotateXNegJoy
        {
            get
            {
                return SteamVR_Actions.p_default_rotateXNegJoy.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 default_rightJoyPosition
        {
            get
            {
                return SteamVR_Actions.p_default_rightJoyPosition.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Vector2 default_leftJoyPosition
        {
            get
            {
                return SteamVR_Actions.p_default_leftJoyPosition.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Vibration default_Haptic
        {
            get
            {
                return SteamVR_Actions.p_default_Haptic.GetCopy <SteamVR_Action_Vibration>();
            }
        }
        
        public static SteamVR_Action_Vector2 platformer_Move
        {
            get
            {
                return SteamVR_Actions.p_platformer_Move.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean platformer_Jump
        {
            get
            {
                return SteamVR_Actions.p_platformer_Jump.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 buggy_Steering
        {
            get
            {
                return SteamVR_Actions.p_buggy_Steering.GetCopy <SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Single buggy_Throttle
        {
            get
            {
                return SteamVR_Actions.p_buggy_Throttle.GetCopy <SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean buggy_Brake
        {
            get
            {
                return SteamVR_Actions.p_buggy_Brake.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean buggy_Reset
        {
            get
            {
                return SteamVR_Actions.p_buggy_Reset.GetCopy <SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose mixedreality_ExternalCamera
        {
            get
            {
                return SteamVR_Actions.p_mixedreality_ExternalCamera.GetCopy <SteamVR_Action_Pose>();
            }
        }
        
        private static void InitializeActionArrays()
        {
            Valve.VR.SteamVR_Input.actions = new Valve.VR.SteamVR_Action[]
            {
                    SteamVR_Actions.default_moveDown,
                    SteamVR_Actions.default_moveForward,
                    SteamVR_Actions.default_moveBackward,
                    SteamVR_Actions.default_moveRight,
                    SteamVR_Actions.default_moveLeft,
                    SteamVR_Actions.default_rotateX,
                    SteamVR_Actions.default_rotateY,
                    SteamVR_Actions.default_rotateZ,
                    SteamVR_Actions.default_skellyLeft,
                    SteamVR_Actions.default_skellyRight,
                    SteamVR_Actions.default_rotateXNeg,
                    SteamVR_Actions.default_rotateYNeg,
                    SteamVR_Actions.default_rotateZNeg,
                    SteamVR_Actions.default_trackpadLeftPosition,
                    SteamVR_Actions.default_trackpadRightPosition,
                    SteamVR_Actions.default_holdPiece,
                    SteamVR_Actions.default_moveLeftJoy,
                    SteamVR_Actions.default_moveForwardJoy,
                    SteamVR_Actions.default_moveRightJoy,
                    SteamVR_Actions.default_moveBackwardJoy,
                    SteamVR_Actions.default_rotateXJoy,
                    SteamVR_Actions.default_rotateZJoy,
                    SteamVR_Actions.default_rotateZNegJoy,
                    SteamVR_Actions.default_rotateXNegJoy,
                    SteamVR_Actions.default_rightJoyPosition,
                    SteamVR_Actions.default_leftJoyPosition,
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.mixedreality_ExternalCamera};
            Valve.VR.SteamVR_Input.actionsIn = new Valve.VR.ISteamVR_Action_In[]
            {
                    SteamVR_Actions.default_moveDown,
                    SteamVR_Actions.default_moveForward,
                    SteamVR_Actions.default_moveBackward,
                    SteamVR_Actions.default_moveRight,
                    SteamVR_Actions.default_moveLeft,
                    SteamVR_Actions.default_rotateX,
                    SteamVR_Actions.default_rotateY,
                    SteamVR_Actions.default_rotateZ,
                    SteamVR_Actions.default_skellyLeft,
                    SteamVR_Actions.default_skellyRight,
                    SteamVR_Actions.default_rotateXNeg,
                    SteamVR_Actions.default_rotateYNeg,
                    SteamVR_Actions.default_rotateZNeg,
                    SteamVR_Actions.default_trackpadLeftPosition,
                    SteamVR_Actions.default_trackpadRightPosition,
                    SteamVR_Actions.default_holdPiece,
                    SteamVR_Actions.default_moveLeftJoy,
                    SteamVR_Actions.default_moveForwardJoy,
                    SteamVR_Actions.default_moveRightJoy,
                    SteamVR_Actions.default_moveBackwardJoy,
                    SteamVR_Actions.default_rotateXJoy,
                    SteamVR_Actions.default_rotateZJoy,
                    SteamVR_Actions.default_rotateZNegJoy,
                    SteamVR_Actions.default_rotateXNegJoy,
                    SteamVR_Actions.default_rightJoyPosition,
                    SteamVR_Actions.default_leftJoyPosition,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.mixedreality_ExternalCamera};
            Valve.VR.SteamVR_Input.actionsOut = new Valve.VR.ISteamVR_Action_Out[]
            {
                    SteamVR_Actions.default_Haptic};
            Valve.VR.SteamVR_Input.actionsVibration = new Valve.VR.SteamVR_Action_Vibration[]
            {
                    SteamVR_Actions.default_Haptic};
            Valve.VR.SteamVR_Input.actionsPose = new Valve.VR.SteamVR_Action_Pose[]
            {
                    SteamVR_Actions.default_skellyLeft,
                    SteamVR_Actions.default_skellyRight,
                    SteamVR_Actions.mixedreality_ExternalCamera};
            Valve.VR.SteamVR_Input.actionsBoolean = new Valve.VR.SteamVR_Action_Boolean[]
            {
                    SteamVR_Actions.default_moveDown,
                    SteamVR_Actions.default_moveForward,
                    SteamVR_Actions.default_moveBackward,
                    SteamVR_Actions.default_moveRight,
                    SteamVR_Actions.default_moveLeft,
                    SteamVR_Actions.default_rotateX,
                    SteamVR_Actions.default_rotateY,
                    SteamVR_Actions.default_rotateZ,
                    SteamVR_Actions.default_rotateXNeg,
                    SteamVR_Actions.default_rotateYNeg,
                    SteamVR_Actions.default_rotateZNeg,
                    SteamVR_Actions.default_holdPiece,
                    SteamVR_Actions.default_moveLeftJoy,
                    SteamVR_Actions.default_moveForwardJoy,
                    SteamVR_Actions.default_moveRightJoy,
                    SteamVR_Actions.default_moveBackwardJoy,
                    SteamVR_Actions.default_rotateXJoy,
                    SteamVR_Actions.default_rotateZJoy,
                    SteamVR_Actions.default_rotateZNegJoy,
                    SteamVR_Actions.default_rotateXNegJoy,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset};
            Valve.VR.SteamVR_Input.actionsSingle = new Valve.VR.SteamVR_Action_Single[]
            {
                    SteamVR_Actions.buggy_Throttle};
            Valve.VR.SteamVR_Input.actionsVector2 = new Valve.VR.SteamVR_Action_Vector2[]
            {
                    SteamVR_Actions.default_trackpadLeftPosition,
                    SteamVR_Actions.default_trackpadRightPosition,
                    SteamVR_Actions.default_rightJoyPosition,
                    SteamVR_Actions.default_leftJoyPosition,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.buggy_Steering};
            Valve.VR.SteamVR_Input.actionsVector3 = new Valve.VR.SteamVR_Action_Vector3[0];
            Valve.VR.SteamVR_Input.actionsSkeleton = new Valve.VR.SteamVR_Action_Skeleton[0];
            Valve.VR.SteamVR_Input.actionsNonPoseNonSkeletonIn = new Valve.VR.ISteamVR_Action_In[]
            {
                    SteamVR_Actions.default_moveDown,
                    SteamVR_Actions.default_moveForward,
                    SteamVR_Actions.default_moveBackward,
                    SteamVR_Actions.default_moveRight,
                    SteamVR_Actions.default_moveLeft,
                    SteamVR_Actions.default_rotateX,
                    SteamVR_Actions.default_rotateY,
                    SteamVR_Actions.default_rotateZ,
                    SteamVR_Actions.default_rotateXNeg,
                    SteamVR_Actions.default_rotateYNeg,
                    SteamVR_Actions.default_rotateZNeg,
                    SteamVR_Actions.default_trackpadLeftPosition,
                    SteamVR_Actions.default_trackpadRightPosition,
                    SteamVR_Actions.default_holdPiece,
                    SteamVR_Actions.default_moveLeftJoy,
                    SteamVR_Actions.default_moveForwardJoy,
                    SteamVR_Actions.default_moveRightJoy,
                    SteamVR_Actions.default_moveBackwardJoy,
                    SteamVR_Actions.default_rotateXJoy,
                    SteamVR_Actions.default_rotateZJoy,
                    SteamVR_Actions.default_rotateZNegJoy,
                    SteamVR_Actions.default_rotateXNegJoy,
                    SteamVR_Actions.default_rightJoyPosition,
                    SteamVR_Actions.default_leftJoyPosition,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset};
        }
        
        private static void PreInitActions()
        {
            SteamVR_Actions.p_default_moveDown = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/moveDown")));
            SteamVR_Actions.p_default_moveForward = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/moveForward")));
            SteamVR_Actions.p_default_moveBackward = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/moveBackward")));
            SteamVR_Actions.p_default_moveRight = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/moveRight")));
            SteamVR_Actions.p_default_moveLeft = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/moveLeft")));
            SteamVR_Actions.p_default_rotateX = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/rotateX")));
            SteamVR_Actions.p_default_rotateY = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/rotateY")));
            SteamVR_Actions.p_default_rotateZ = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/rotateZ")));
            SteamVR_Actions.p_default_skellyLeft = ((SteamVR_Action_Pose)(SteamVR_Action.Create <SteamVR_Action_Pose>("/actions/default/in/skellyLeft")));
            SteamVR_Actions.p_default_skellyRight = ((SteamVR_Action_Pose)(SteamVR_Action.Create <SteamVR_Action_Pose>("/actions/default/in/skellyRight")));
            SteamVR_Actions.p_default_rotateXNeg = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/rotateXNeg")));
            SteamVR_Actions.p_default_rotateYNeg = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/rotateYNeg")));
            SteamVR_Actions.p_default_rotateZNeg = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/rotateZNeg")));
            SteamVR_Actions.p_default_trackpadLeftPosition = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/default/in/trackpadLeftPosition")));
            SteamVR_Actions.p_default_trackpadRightPosition = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/default/in/trackpadRightPosition")));
            SteamVR_Actions.p_default_holdPiece = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/holdPiece")));
            SteamVR_Actions.p_default_moveLeftJoy = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/moveLeftJoy")));
            SteamVR_Actions.p_default_moveForwardJoy = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/moveForwardJoy")));
            SteamVR_Actions.p_default_moveRightJoy = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/moveRightJoy")));
            SteamVR_Actions.p_default_moveBackwardJoy = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/moveBackwardJoy")));
            SteamVR_Actions.p_default_rotateXJoy = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/rotateXJoy")));
            SteamVR_Actions.p_default_rotateZJoy = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/rotateZJoy")));
            SteamVR_Actions.p_default_rotateZNegJoy = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/rotateZNegJoy")));
            SteamVR_Actions.p_default_rotateXNegJoy = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/default/in/rotateXNegJoy")));
            SteamVR_Actions.p_default_rightJoyPosition = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/default/in/rightJoyPosition")));
            SteamVR_Actions.p_default_leftJoyPosition = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/default/in/leftJoyPosition")));
            SteamVR_Actions.p_default_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create <SteamVR_Action_Vibration>("/actions/default/out/Haptic")));
            SteamVR_Actions.p_platformer_Move = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/platformer/in/Move")));
            SteamVR_Actions.p_platformer_Jump = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/platformer/in/Jump")));
            SteamVR_Actions.p_buggy_Steering = ((SteamVR_Action_Vector2)(SteamVR_Action.Create <SteamVR_Action_Vector2>("/actions/buggy/in/Steering")));
            SteamVR_Actions.p_buggy_Throttle = ((SteamVR_Action_Single)(SteamVR_Action.Create <SteamVR_Action_Single>("/actions/buggy/in/Throttle")));
            SteamVR_Actions.p_buggy_Brake = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/buggy/in/Brake")));
            SteamVR_Actions.p_buggy_Reset = ((SteamVR_Action_Boolean)(SteamVR_Action.Create <SteamVR_Action_Boolean>("/actions/buggy/in/Reset")));
            SteamVR_Actions.p_mixedreality_ExternalCamera = ((SteamVR_Action_Pose)(SteamVR_Action.Create <SteamVR_Action_Pose>("/actions/mixedreality/in/ExternalCamera")));
        }
    }
}
